# Copyright 2011 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Method mapping table for JRE classes to iOS classes.
#
# The format for this is simpler than it looks:  it's just a
# java.util.Properties file where a Java method signature is the key, and
# a modified iOS method signature is the value.
#
# Java method signatures are defined in the Java Virtual Machine
# Specification, and are what's shown when viewing a JVM class using
# "javap -v". iOS method signatures are defined as the class name, followed by
# the signature as declared in the class' header file, minus the return value.
#
# Method matching has the following restrictions:
#
# 1. The Java and iOS methods must either both be instance or both be
#    class (static) methods.  In Objective-C terms, the receiver of these
#    messages doesn't change.
# 2. The parameters must be the same type and in the same order.
#
# Since the JRE and Foundation APIs aren't identical, these rules block many
# essential mappings.  However, the list below contains several NSString
# messages that aren't part of the Foundation API.  These are added via the
# JRE emulation library's NSString+JavaString category.  If other methods
# need to be mapped but cannot be because of the above restrictions, a
# wrapper method needs to be added to this category (or a new category for
# another class), and the wrapper method used here.
#
# The "java_" selector prefix is used for methods defined in a Foundation
# class category, as recommended by Apple to avoid conflicts with other
# categories for the same class. Therefore, every selector here starting
# with "java_" defines a method in one of the jre_emul library's
# categories (such as NSObject+JavaObject). If the selector name doesn't
# start with "java_", then it is directly mapped to a public method on that
# Foundation class. For example, "lowercaseString" doesn't have a prefix because
# String.toLowerCase() is directly mapped to NSString's "lowercaseString:"
# method; String.startsWith(String,int) is mapped to the NSString+JavaString
# category method "java_hasPrefix:offset:" because NSString does not have
# an equivalent method.

# java.lang.Object
java.lang.Object.clone()Ljava/lang/Object; = java_clone
java.lang.Object.equals(Ljava/lang/Object;)Z = isEqual:
java.lang.Object.finalize()V = java_finalize
java.lang.Object.getClass()Ljava/lang/Class; = java_getClass
java.lang.Object.hashCode()I = hash
java.lang.Object.notify()V = java_notify
java.lang.Object.notifyAll()V = java_notifyAll
java.lang.Object.toString()Ljava/lang/String; = description
java.lang.Object.wait()V = java_wait
java.lang.Object.wait(J)V = java_waitWithLong:
java.lang.Object.wait(JI)V = java_waitWithLong:withInt:

# java.lang.Class
java.lang.Class.asSubclass(Ljava/lang/Class;)Ljava/lang/Class; = asSubclass:
java.lang.Class.cast(Ljava/lang/Object;)Ljava/lang/Object; = cast:
java.lang.Class.desiredAssertionStatus()Z = desiredAssertionStatus
java.lang.Class.forName(Ljava/lang/String;)Ljava/lang/Class; = forName:
java.lang.Class.forName(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class; = \
    forName:initialize:classLoader:
java.lang.Class.getAnnotation(Ljava/lang/Class;)Ljava/lang/annotation/Annotation; = \
    getAnnotationWithIOSClass:
java.lang.Class.getAnnotations()[Ljava/lang/annotation/Annotation; = getAnnotations
java.lang.Class.getCanonicalName()Ljava/lang/String; = getCanonicalName
java.lang.Class.getClassLoader()Ljava/lang/ClassLoader; = getClassLoader
java.lang.Class.getComponentType()Ljava/lang/Class; = getComponentType
java.lang.Class.getConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; = getConstructor:
java.lang.Class.getConstructors()[Ljava/lang/reflect/Constructor; = getConstructors
java.lang.Class.getDeclaredAnnotations()[Ljava/lang/annotation/Annotation; = getDeclaredAnnotations
java.lang.Class.getDeclaredConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; = \
    getDeclaredConstructor:
java.lang.Class.getDeclaredConstructors()[Ljava/lang/reflect/Constructor; = getDeclaredConstructors
java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; = getDeclaredField:
java.lang.Class.getDeclaredFields()[Ljava/lang/reflect/Field; = getDeclaredFields
java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; = \
    getDeclaredMethod:parameterTypes:
java.lang.Class.getDeclaredMethods()[Ljava/lang/reflect/Method; = getDeclaredMethods
java.lang.Class.getEnclosingClass()Ljava/lang/Class; = getEnclosingClass
java.lang.Class.getEnclosingConstructor()Ljava/lang/reflect/Constructor; = getEnclosingConstructor
java.lang.Class.getEnclosingMethod()Ljava/lang/reflect/Method; = getEnclosingMethod
java.lang.Class.getEnumConstants()[Ljava/lang/Object; = getEnumConstants
java.lang.Class.getField(Ljava/lang/String;)Ljava/lang/reflect/Field; = getField:
java.lang.Class.getFields()[Ljava/lang/reflect/Field; = getFields
java.lang.Class.getGenericInterfaces()[Ljava/lang/reflect/Type; = getGenericInterfaces
java.lang.Class.getInterfaces()[Ljava/lang/Class; = getInterfaces
java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; = \
    getMethod:parameterTypes:
java.lang.Class.getMethods()[Ljava/lang/reflect/Method; = getMethods
java.lang.Class.getModifiers()I = getModifiers
java.lang.Class.getName()Ljava/lang/String; = getName
java.lang.Class.getPackage()Ljava/lang/Package; = getPackage
java.lang.Class.getResource(Ljava/lang/String;)Ljava/net/URL; = getResource:
java.lang.Class.getResourceAsStream(Ljava/lang/String;)Ljava/io/InputStream; = getResourceAsStream:
java.lang.Class.getSimpleName()Ljava/lang/String; = getSimpleName
java.lang.Class.getSuperclass()Ljava/lang/Class; = getSuperclass
java.lang.Class.getTypeParameters()[Ljava/lang/reflect/TypeVariable; = getTypeParameters
java.lang.Class.isAnnotationPresent(Ljava/lang/Class;)Z = isAnnotationPresentWithIOSClass:
java.lang.Class.isAnonymousClass()Z = isAnonymousClass
java.lang.Class.isArray()Z = isArray
java.lang.Class.isAssignableFrom(Ljava/lang/Class;)Z = isAssignableFrom:
java.lang.Class.isEnum()Z = isEnum
java.lang.Class.isInstance(Ljava/lang/Object;)Z = isInstance:
java.lang.Class.isInterface()Z = isInterface
java.lang.Class.isPrimitive()Z = isPrimitive
java.lang.Class.newInstance()Ljava/lang/Object; = newInstance

# java.lang.String
java.lang.String.charAt(I)C = charAtWithInt:
java.lang.String.codePointAt(I)I = java_codePointAt:
java.lang.String.codePointBefore(I)I = java_codePointBefore:
java.lang.String.codePointCount(II)I = java_codePointCount:endIndex:
java.lang.String.compareTo(Ljava/lang/String;)I = compareToWithId:
java.lang.String.compareToIgnoreCase(Ljava/lang/String;)I = java_compareToIgnoreCase:
java.lang.String.concat(Ljava/lang/String;)Ljava/lang/String; = java_concat:
java.lang.String.contains(Ljava/lang/CharSequence;)Z = java_contains:
java.lang.String.contentEquals(Ljava/lang/CharSequence;)Z = java_contentEqualsCharSequence:
java.lang.String.contentEquals(Ljava/lang/StringBuffer;)Z = java_contentEqualsStringBuffer:
java.lang.String.endsWith(Ljava/lang/String;)Z = java_hasSuffix:
java.lang.String.equals(Ljava/lang/Object;)Z = isEqual:
java.lang.String.equalsIgnoreCase(Ljava/lang/String;)Z = java_equalsIgnoreCase:
java.lang.String.format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String; = \
    java_formatWithNSString:withNSObjectArray:
java.lang.String.format(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;=\
    java_formatWithJavaUtilLocale:withNSString:withNSObjectArray:
java.lang.String.getBytes()[B = java_getBytes
java.lang.String.getBytes(Ljava/lang/String;)[B = java_getBytesWithCharsetName:
java.lang.String.getBytes(Ljava/nio/charset/Charset;)[B = java_getBytesWithCharset:
java.lang.String.getBytes(II[BI)V = java_getBytesWithSrcBegin:withSrcEnd:withDst:withDstBegin:
java.lang.String.getChars(II[CI)V = java_getChars:sourceEnd:destination:destinationBegin:
java.lang.String.hashCode()I = hash
java.lang.String.indexOf(I)I = java_indexOf:
java.lang.String.indexOf(II)I = java_indexOf:fromIndex:
java.lang.String.indexOf(Ljava/lang/String;)I = java_indexOfString:
java.lang.String.indexOf(Ljava/lang/String;I)I = java_indexOfString:fromIndex:
java.lang.String.intern()Ljava/lang/String; = java_intern
java.lang.String.isEmpty()Z = java_isEmpty
java.lang.String.join(Ljava/lang/CharSequence;[Ljava/lang/CharSequence;)Ljava/lang/String; = \
    java_joinWithJavaLangCharSequence:withJavaLangCharSequenceArray:
java.lang.String.join(Ljava/lang/CharSequence;Ljava/lang/Iterable;)Ljava/lang/String; = \
    java_joinWithJavaLangCharSequence:withJavaLangIterable:
java.lang.String.lastIndexOf(I)I = java_lastIndexOf:
java.lang.String.lastIndexOf(II)I = java_lastIndexOf:fromIndex:
java.lang.String.lastIndexOf(Ljava/lang/String;)I = java_lastIndexOfString:
java.lang.String.lastIndexOf(Ljava/lang/String;I)I = java_lastIndexOfString:fromIndex:
java.lang.String.length()I = java_length
java.lang.String.matches(Ljava/lang/String;)Z = java_matches:
java.lang.String.offsetByCodePoints(II)I = java_offsetByCodePoints:codePointOffset:
java.lang.String.regionMatches(ILjava/lang/String;II)Z = \
    java_regionMatches:aString:otherOffset:count:
java.lang.String.regionMatches(ZILjava/lang/String;II)Z = \
    java_regionMatches:thisOffset:aString:otherOffset:count:
java.lang.String.replace(CC)Ljava/lang/String; = java_replace:withChar:
java.lang.String.replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String; = \
    java_replace:withSequence:
java.lang.String.replaceAll(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = \
    java_replaceAll:withReplacement:
java.lang.String.replaceFirst(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = \
    java_replaceFirst:withReplacement:
java.lang.String.split(Ljava/lang/String;)[Ljava/lang/String; = java_split:
java.lang.String.split(Ljava/lang/String;I)[Ljava/lang/String; = java_split:limit:
java.lang.String.startsWith(Ljava/lang/String;)Z = java_hasPrefix:
java.lang.String.startsWith(Ljava/lang/String;I)Z = java_hasPrefix:offset:
java.lang.String.subSequence(II)Ljava/lang/CharSequence; = subSequenceFrom:to:
java.lang.String.substring(I)Ljava/lang/String; = java_substring:
java.lang.String.substring(II)Ljava/lang/String; = java_substring:endIndex:
java.lang.String.toCharArray()[C = java_toCharArray
java.lang.String.toLowerCase()Ljava/lang/String; = lowercaseString
java.lang.String.toLowerCase(Ljava/util/Locale;)Ljava/lang/String; = \
    java_lowercaseStringWithJRELocale:
java.lang.String.toString()Ljava/lang/String; = description
java.lang.String.toUpperCase()Ljava/lang/String; = uppercaseString
java.lang.String.toUpperCase(Ljava/util/Locale;)Ljava/lang/String; = \
    java_uppercaseStringWithJRELocale:
java.lang.String.trim()Ljava/lang/String; = java_trim
java.lang.String.valueOf(Ljava/lang/Object;)Ljava/lang/String; = java_valueOf:
java.lang.String.valueOf(Z)Ljava/lang/String; = java_valueOfBool:
java.lang.String.valueOf(C)Ljava/lang/String; = java_valueOfChar:
java.lang.String.valueOf(D)Ljava/lang/String; = java_valueOfDouble:
java.lang.String.valueOf(F)Ljava/lang/String; = java_valueOfFloat:
java.lang.String.valueOf(I)Ljava/lang/String; = java_valueOfInt:
java.lang.String.valueOf(J)Ljava/lang/String; = java_valueOfLong:
java.lang.String.valueOf([C)Ljava/lang/String; = java_valueOfChars:
java.lang.String.valueOf([CII)Ljava/lang/String; = java_valueOfChars:offset:count:
java.lang.String.copyValueOf([C)Ljava/lang/String; = java_valueOfChars:
java.lang.String.copyValueOf([CII)Ljava/lang/String; = java_valueOfChars:offset:count:

java.lang.CharSequence.length()I = java_length
java.lang.CharSequence.subSequence(II)Ljava/lang/CharSequence; = subSequenceFrom:to:

java.lang.Number.longValue()J = longLongValue
java.lang.Number.byteValue()B = charValue
